/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  noteFolderPath: "LINE",
  vaultId: "",
  // デフォルトは空文字列
  lineUserId: ""
  // デフォルトは空文字列
};
var LinePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new LineSettingTab(this.app, this));
    this.addCommand({
      id: "sync-line-messages",
      name: "Sync LINE Messages",
      callback: async () => {
        await this.syncMessages();
      }
    });
    this.addRibbonIcon("refresh-cw", "Sync LINE Messages", async () => {
      await this.syncMessages();
    });
  }
  log(message, error) {
    console.log(`[LINE Plugin] ${message}`);
    if (error) {
      console.error(error);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async syncMessages() {
    if (!this.settings.vaultId) {
      new import_obsidian.Notice("Vault ID not configured. Please set it in plugin settings.");
      this.log("Missing Vault ID");
      return;
    }
    try {
      new import_obsidian.Notice("Syncing LINE messages...");
      this.log("Starting sync process...");
      const url = `https://obsidian-line-plugin.line-to-obsidian.workers.dev/messages/${this.settings.vaultId}`;
      this.log(`Fetching messages from: ${url}`);
      const response = await fetch(url);
      this.log(`Response status: ${response.status}`);
      if (!response.ok) {
        const errorText = await response.text();
        this.log(`Error response body: ${errorText}`);
        throw new Error(`Failed to fetch messages: ${response.statusText}`);
      }
      const responseText = await response.text();
      this.log(`Response body: ${responseText}`);
      let messages;
      try {
        messages = JSON.parse(responseText);
        this.log(`Parsed ${messages.length} messages`);
      } catch (parseError) {
        this.log("Failed to parse response as JSON", parseError);
        throw new Error("Invalid response format");
      }
      let newMessageCount = 0;
      for (const message of messages) {
        const fileName = `${new Date(message.timestamp).toISOString().split("T")[0]}-${message.messageId}.md`;
        const filePath = `${this.settings.noteFolderPath}/${fileName}`;
        this.log(`Processing message: ${message.messageId}`);
        try {
          const exists = await this.app.vault.adapter.exists(filePath);
          if (exists) {
            this.log(`File already exists: ${filePath}`);
            continue;
          }
          if (!await this.app.vault.adapter.exists(this.settings.noteFolderPath)) {
            await this.app.vault.createFolder(this.settings.noteFolderPath);
            this.log(`Created folder: ${this.settings.noteFolderPath}`);
          }
          const content = [
            `---`,
            `source: LINE`,
            `date: ${new Date(message.timestamp).toISOString()}`,
            `messageId: ${message.messageId}`,
            `userId: ${message.userId}`,
            `---`,
            ``,
            `${message.text}`
          ].join("\n");
          await this.app.vault.create(filePath, content);
          newMessageCount++;
          this.log(`Created note: ${filePath}`);
        } catch (err) {
          this.log(`Error processing message ${message.messageId}`, err);
        }
      }
      new import_obsidian.Notice(`LINE messages synced successfully. ${newMessageCount} new messages.`);
    } catch (err) {
      this.log("Error syncing messages", err);
      new import_obsidian.Notice(`Failed to sync LINE messages: ${err instanceof Error ? err.message : "Unknown error"}`);
    }
  }
  async registerMapping() {
    if (!this.settings.lineUserId || !this.settings.vaultId) {
      new import_obsidian.Notice("LINE UserID\u3068Vault ID\u306E\u4E21\u65B9\u3092\u8A2D\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002");
      return;
    }
    try {
      const response = await fetch("https://obsidian-line-plugin.line-to-obsidian.workers.dev/mapping", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          userId: this.settings.lineUserId,
          vaultId: this.settings.vaultId
        })
      });
      if (!response.ok) {
        throw new Error(`Failed to register mapping: ${response.statusText}`);
      }
      new import_obsidian.Notice("LINE UserID\u3068Vault ID\u306E\u30DE\u30C3\u30D4\u30F3\u30B0\u3092\u767B\u9332\u3057\u307E\u3057\u305F\u3002");
    } catch (error) {
      new import_obsidian.Notice(`\u30DE\u30C3\u30D4\u30F3\u30B0\u306E\u767B\u9332\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${error instanceof Error ? error.message : "Unknown error"}`);
      this.log("Error registering mapping", error);
    }
  }
};
var LineSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "LINE Integration Settings" });
    new import_obsidian.Setting(containerEl).setName("Note Folder Path").setDesc("Folder path where LINE messages will be saved").addText((text) => text.setPlaceholder("LINE").setValue(this.plugin.settings.noteFolderPath).onChange(async (value) => {
      this.plugin.settings.noteFolderPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Vault ID").setDesc("Unique identifier for this Obsidian vault (required for deployment)").addText((text) => text.setPlaceholder("Enter vault ID").setValue(this.plugin.settings.vaultId).onChange(async (value) => {
      this.plugin.settings.vaultId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("LINE User ID").setDesc("LINE\u30DC\u30C3\u30C8\u3068\u306E\u4F1A\u8A71\u3067\u53D6\u5F97\u3057\u305F\u30E6\u30FC\u30B6\u30FCID\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044").addText((text) => text.setPlaceholder("Enter your LINE User ID").setValue(this.plugin.settings.lineUserId).onChange(async (value) => {
      this.plugin.settings.lineUserId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Register Mapping").setDesc("LINE UserID\u3068Vault ID\u306E\u30DE\u30C3\u30D4\u30F3\u30B0\u3092\u767B\u9332\u3057\u307E\u3059").addButton((button) => button.setButtonText("Register").onClick(async () => {
      await this.plugin.registerMapping();
    }));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
