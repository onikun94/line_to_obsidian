name: Auto Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  auto-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git user
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version and commit
        id: version_update
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Update version
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Update manifest.json and versions.json
          npm run version
          
          # Update README.md version badge
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+-blue/version-${NEW_VERSION}-blue/g" README.md
          
          # Commit changes
          git add package.json manifest.json versions.json README.md
          git commit -m "chore: update version to ${NEW_VERSION}"
          
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build plugin
        env:
          OBSIDIAN_LINE_API_URL: ${{ secrets.OBSIDIAN_LINE_API_URL }}
          NODE_ENV: production
        run: pnpm --filter obsidian-plugin build

      - name: Push changes
        run: |
          git push origin main

      - name: Create and push tag
        run: |
          git tag ${{ steps.version_update.outputs.new_version }}
          git push origin ${{ steps.version_update.outputs.new_version }}

      - name: Prepare release files
        run: |
          mkdir ${{ github.event.repository.name }}
          cp packages/obsidian-plugin/main.js manifest.json ${{ github.event.repository.name }}/
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.version_update.outputs.new_version }}" \
            --title="${{ steps.version_update.outputs.new_version }}" \
            --generate-notes \
            ${{ github.event.repository.name }}.zip \
            packages/obsidian-plugin/main.js \
            manifest.json \

      - name: Release completion notification
        run: |
          echo "Release ${{ steps.version_update.outputs.new_version }} has been created successfully!"
          echo "Release page: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version_update.outputs.new_version }}" 
